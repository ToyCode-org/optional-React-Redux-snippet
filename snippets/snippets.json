{
  "console log": {
    "prefix": "clog",
    "body": ["console.log($1)"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "console time": {
    "prefix": "ctime",
    "body": ["console.time($1)"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "export default component": {
    "prefix": "edcf",
    "body": [
      "export default function $Name(){",
      "  return (",
      "    <div>",
      "      <p>new Component</p>",
      "    </div>",
      "  )",
      "}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "export component": {
    "prefix": "ecf",
    "body": [
      "export const $Name = () => {",
      "  return (",
      "    <div>",
      "      <p>new Component</p>",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "export const component",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "create arrow function": {
    "prefix": "caf",
    "body": ["const $Name = () => {", "", "}"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useState start": {
    "prefix": "uss",
    "body": "const [$name,set$name] = useState($0)",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useEffect start": {
    "prefix": "uff",
    "body": ["useEffect(() => {", "  $1", "}, [])"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useRef start": {
    "prefix": "urr",
    "body": ["const $Name = useRef()"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useCallback start": {
    "prefix": "ucc",
    "body": ["useCallback(() => {", "  $1", "}, [])"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useMemo start": {
    "prefix": "umm",
    "body": ["useMemo(() => {", "  $1", "}, [])"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "redux store generator": {
    "prefix": "rdxstore",
    "body": [
      "import { configureStore } from \"@reduxjs/toolkit\";",
      "",
      "const store = configureStore({",
      "  reducer: {",
      "    $1",
      "  },",
      "});",
      "export default store;"
    ]
  },
  "redux slice generator": {
    "prefix": "rdxslice",
    "body": [
      "import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";",
      "",
      "export const get$1nameAll = createAsyncThunk(",
      "  \"GET_ALL\",",
      "  async (payload, thunkAPI) => {",
      "    try {",
      "      // const { data } = await request API",
      "      return thunkAPI.fulfillWithValue(data);",
      "    } catch (error) {",
      "      return thunkAPI.rejectWithValue(error);",
      "    }",
      "  }",
      ");",
      "",
      "export const get$1nameOne = createAsyncThunk(",
      "  \"GET_ONE\",",
      "  async (payload, thunkAPI) => {",
      "    try {",
      "      // const { data } = await request API",
      "      return thunkAPI.fulfillWithValue(data);",
      "    } catch (error) {",
      "      return thunkAPI.rejectWithValue(error);",
      "    }",
      "  }",
      ");",
      "",
      "export const add$1name = createAsyncThunk(",
      "  \"POST_ADD\",",
      "  async (payload, thunkAPI) => {",
      "    try {",
      "      // const { data } = await request API",
      "      return thunkAPI.fulfillWithValue(data);",
      "    } catch (errer) {",
      "      return thunkAPI.rejectWithValue(errer);",
      "    }",
      "  }",
      ");",
      "",
      "export const update$1name = createAsyncThunk(",
      "  \"POST_UPDATAE\",",
      "  async (payload, thunkAPI) => {",
      "    try {",
      "      // const { data } = await request API",
      "      return thunkAPI.fulfillWithValue(data);",
      "    } catch (error) {",
      "      return thunkAPI.rejectWithValue(error);",
      "    }",
      "  }",
      ");",
      "",
      "export const delete$1name = createAsyncThunk(",
      "  \"DELETE_ONE\",",
      "  async (payload, thunkAPI) => {",
      "    try {",
      "      // await delete request API",
      "      return thunkAPI.fulfillWithValue(payload);",
      "    } catch (error) {",
      "      return thunkAPI.rejectWithValue(error);",
      "    }",
      "  }",
      ");",
      "",
      "/* InitialState */",
      "// data, isLoading, error로 상태관리",
      "const initialState = {",
      "  $2name: [],",
      "  isLoading: false,",
      "  error: null,",
      "};",
      "",
      "export const $2nameSlice = createSlice({",
      "  name: \"$2name\",",
      "  initialState,",
      "  reducers: {},",
      "  extraReducers: (builder) => {",
      "    builder.addCase(get$1nameAll.fulfilled, (state, action) => {",
      "      state.$2name = action.payload;",
      "    });",
      "    builder.addCase(get$1nameOne.fulfilled, (state, action) => {",
      "      state.$2name = action.payload;",
      "    });",
      "    builder.addCase(add$1name.fulfilled, (state, action) => {",
      "      // state.$2name.unshift(action.payload);",
      "    });",
      "    builder.addCase(update$1name.fulfilled, (state, action) => {",
      "      const newState = state.$2name.map((item) =>",
      "        action.meta.arg.id === item.id",
      "          ? {",
      "              ...action.payload,",
      "            }",
      "          : item",
      "      );",
      "      state.$2name = newState;",
      "    });",
      "    builder.addCase(delete$1name.fulfilled, (state, action) => {",
      "      const newState = state.$2name.filter(",
      "        (item) => item.id !== action.payload",
      "      );",
      "      state.$2name = newState;",
      "    });",
      "  },",
      "});",
      "",
      "export default $2nameSlice.reducer;"
    ]
  }
}
